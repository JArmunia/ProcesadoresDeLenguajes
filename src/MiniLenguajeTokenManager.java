/* Generated By:JavaCC: Do not edit this line. MiniLenguajeTokenManager.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import clasesJava.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

/** Token Manager. */
public class MiniLenguajeTokenManager implements MiniLenguajeConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xdffffff800L) != 0L)
         {
            jjmatchedKind = 63;
            return 15;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0x1510000L) != 0L)
            return 15;
         if ((active0 & 0xfffeaef800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 1;
            }
            return 15;
         }
         return -1;
      case 2:
         if ((active0 & 0x1c92eac000L) != 0L)
            return 15;
         if ((active0 & 0xe36c043800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return 15;
         }
         return -1;
      case 3:
         if ((active0 & 0x28000000L) != 0L)
            return 15;
         if ((active0 & 0xf3c4443800L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
            return 15;
         }
         return -1;
      case 4:
         if ((active0 & 0x40400800L) != 0L)
            return 15;
         if ((active0 & 0xf384043000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 15;
         }
         return -1;
      case 5:
         if ((active0 & 0x1200001000L) != 0L)
            return 15;
         if ((active0 & 0xe184042000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 15;
         }
         return -1;
      case 6:
         if ((active0 & 0x2180000000L) != 0L)
            return 15;
         if ((active0 & 0xc004042000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
            return 15;
         }
         return -1;
      case 7:
         if ((active0 & 0xc004002000L) != 0L)
            return 15;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
            return 15;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 59);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 42:
         return jjStopAtPos(0, 52);
      case 43:
         return jjStopAtPos(0, 50);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         return jjStopAtPos(0, 51);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 59:
         return jjStopAtPos(0, 48);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x180000000000000L);
      case 61:
         return jjStopAtPos(0, 47);
      case 62:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 91:
         return jjStopAtPos(0, 44);
      case 93:
         return jjStopAtPos(0, 45);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200008000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8100000800L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1084200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x42880000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x11001000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x42000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x500000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400004000L);
      case 123:
         return jjStopAtPos(0, 40);
      case 125:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 62:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8540004000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2808001000L);
      case 73:
      case 105:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x480000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080208000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4010020000L);
      case 81:
      case 113:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 15);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x20042000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2204000000L);
      case 68:
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 15);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 15);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 15);
         break;
      case 73:
      case 105:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 76:
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 15);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002000L);
      case 81:
      case 113:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 15);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x8100000000L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 15);
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1080001000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8180000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 82:
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080040000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 15);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000002000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x6080002000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 79:
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 15);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 15);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 15);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 15);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 15);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 15);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 15);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 37)
                     jjAddStates(3, 4);
                  else if (curChar == 47)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 7:
                  if (curChar == 37)
                     jjAddStates(3, 4);
                  break;
               case 8:
                  if ((0xffffffdfffffffffL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 9:
                  if (curChar == 37 && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x40000000400000L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 3:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 8:
                  if (kind > 5)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 5)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 60);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 7);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   11, 12, 13, 8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\173", "\175", "\50", "\51", "\133", "\135", "\72\75", "\75", "\73", "\54", "\53", 
"\55", "\52", null, "\76\75", "\74\75", "\74\76", "\76", "\74", null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMENT",
   "COMENT_MULTI",
   "STRING",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xe7fffffffffff801L, 0x3L, 
};
static final long[] jjtoSkip = {
   0x18000000000002feL, 0x0L, 
};
static final long[] jjtoMore = {
   0x500L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[15];
static private final int[] jjstateSet = new int[30];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public MiniLenguajeTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MiniLenguajeTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tCLASE");
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tMETODO");
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tPROGRAMA");
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tVAR");
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tAND");
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tOR");
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tNOT");
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tPRINCIPIO");
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tFIN");
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tSI");
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tENT");
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tSI_NO");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tFSI");
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tMQ");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tFMQ");
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tESCRIBIR");
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tLEER");
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tMOD");
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tTRUE");
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tFALSE");
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tENTACAR");
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tCARAENT");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tACCION");
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tVAL");
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tREF");
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tENTERO");
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tDECIMAL");
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tBOOLEANO");
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tCARACTER");
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
    MiniLenguaje.addToVerboseMap("tLLAVE_IZQ");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
    MiniLenguaje.addToVerboseMap("tLLAVE_DCHA");
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
    MiniLenguaje.addToVerboseMap("tPARENTESIS_IZQ");
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
    MiniLenguaje.addToVerboseMap("tPARENTESIS_DCHA");
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
    MiniLenguaje.addToVerboseMap("tCORCHETE_IZQ");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
    MiniLenguaje.addToVerboseMap("tCORCHETE_DCHA");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
    MiniLenguaje.addToVerboseMap("tOPAS");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
    MiniLenguaje.addToVerboseMap("tIGUAL");
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
    MiniLenguaje.addToVerboseMap("tFIN_SENTENCIA");
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
    MiniLenguaje.addToVerboseMap("tCOMA");
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
    MiniLenguaje.addToVerboseMap("tMAS");
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
    MiniLenguaje.addToVerboseMap("tMENOS");
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
    MiniLenguaje.addToVerboseMap("tPOR");
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tDIV");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
    MiniLenguaje.addToVerboseMap("tMAI");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
    MiniLenguaje.addToVerboseMap("tMEI");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
    MiniLenguaje.addToVerboseMap("tNI");
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
    MiniLenguaje.addToVerboseMap("tMAYOR");
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
    MiniLenguaje.addToVerboseMap("tMENOR");
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tCHAR");
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tSTRING");
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tIDENTIFICADOR");
         break;
      case 64 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tENTERO");
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    MiniLenguaje.addToVerboseMap("tDECIMAL");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
