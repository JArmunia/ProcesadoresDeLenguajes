/* Generated By:JavaCC: Do not edit this line. MiniLenguaje.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import ClasesJava.*;
import java.util.ArrayList;

public class MiniLenguaje implements MiniLenguajeConstants {
  public static boolean verbose = false;

  public static Tabla_simbolos tabla_simbolos;

  public static int nivel;

  public static final int TBD = - 1;

  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    for (int i = 0; i < args.length; i++)
    {
      if (args [i].equals("-v"))
      verbose = true;
    }
    //MiniLenguaje parser = new MiniLenguaje(System.in);
    FileInputStream file = null;
    try
    {
      file = new FileInputStream(args [0]);
      MiniLenguaje parser = new MiniLenguaje(file);
    }
    catch (FileNotFoundException e)
    {
      // TODO: Explicar instrucciones de ejecución
      System.err.print("ERROR: No se ha podido encontrar el archivo: " + args [0]);
      System.exit(- 1);
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      // TODO: Explicar instrucciones de ejecución
      System.err.print("ERROR: No se ha especificado un archivo");
      System.exit(- 1);
    }
    try
    {
      MiniLenguaje.programa(verbose);
    }
    catch (ParseException e)
    {
      System.err.println(e.getMessage());
      //MiniLenguaje.ReInit(System.in);
    }
    catch (Error e)
    {
      e.printStackTrace();
      System.err.println(e.getMessage());
      System.exit(0);
    }
  }

  private static void error_skipto(int kind)
  {
    //ParseException e = generateParseException();
    //System.out.println(e.toString());
    Token t = getNextToken();
    System.out.println(t);
    while (t.kind != kind)
    {
      t = getNextToken();
      System.out.println(t);

    }
  }

  private static void error_sintactico(ParseException e, String msg)
  {
    //correcto = false;
    //Token lastRead = MiniLenguaje.getNextToken();
    //System.err.println("ERROR SINTACTICO (<" + lastRead.beginLine + ", " + 
    //lastRead.beginColumn + ">) : <Simbolo obtenido: '" + lastRead.image + 
    //"'. " + msg + ">");
  }

  private static void error_sintactico(ParseException e)
  {
    //error_sintactico(e, "");
    System.err.println(e.getMessage());
    //Token lastRead = MiniLenguaje.getNextToken();
    error_skipto(tFIN_SENTENCIA);
  }

  private static void error_semantico(Exception e)
  {
    System.err.println(e.getMessage());
  }

/************************************
************* PROGRAMA **************
*************************************/

// <tPROGRAMA> <tIDENTIFICADOR> <tFIN_SENTENCIA> declaracion_variables() declaracion_acciones() bloque_sentencias()
  static final public void programa(boolean verbose) throws ParseException {
    try {
      tabla_simbolos = Tabla_simbolos.inicializar_tabla(31);
      nivel = 0;
      jj_consume_token(tPROGRAMA);
      jj_consume_token(tIDENTIFICADOR);
      tabla_simbolos.introducir_programa(token.image, TBD);
      jj_consume_token(tFIN_SENTENCIA);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
      tabla_simbolos.eliminar_programa();
      System.out.println("Fin de programa");
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// (declaracion()<tFIN_SENTENCIA>)*
  static final public void declaracion_variables() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tDECIMAL:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaracion();
        jj_consume_token(tFIN_SENTENCIA);
      }
    } catch (ParseException e) {
    error_sintactico(e);
    System.out.println("Entra aqui");
    }
  }

// tipo_variables() identificadores()
  static final public void declaracion() throws ParseException {
  Tipo_variable tipo;
  ArrayList < String > identificadores;
    try {
      tipo = tipo_variables();
      identificadores = identificadores();
      for (String identificador : identificadores)
      {
        if (tabla_simbolos.introducir_variable(identificador, tipo, nivel, TBD) == null)
        {
          {if (true) throw new ExcepcionTablaSimbolos(token, tabla_simbolos.buscar_simbolo(identificador));}
        }
      }
    } catch (ParseException e) {
    error_sintactico(e);
    } catch (ExcepcionTablaSimbolos e) {
    error_semantico(e);
    }
  }

// <tENTERO> | <tCARACTER> | <tBOOLEANO> | <tDECIMAL>
  static final public Tipo_variable tipo_variables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tENTERO:
      jj_consume_token(tENTERO);
    {if (true) return Tipo_variable.ENTERO;}
      break;
    case tCARACTER:
      jj_consume_token(tCARACTER);
    {if (true) return Tipo_variable.CHAR;}
      break;
    case tBOOLEANO:
      jj_consume_token(tBOOLEANO);
    {if (true) return Tipo_variable.BOOLEANO;}
      break;
    case tDECIMAL:
      jj_consume_token(tDECIMAL);
    {if (true) return Tipo_variable.DECIMAL;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <tIDENTIFICADOR>(<tCOMA><tIDENTIFICADOR>)*
  static final public ArrayList < String > identificadores() throws ParseException {
  ArrayList < String > identificadores = new ArrayList();
    try {
      jj_consume_token(tIDENTIFICADOR);
      identificadores.add(token.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        jj_consume_token(tIDENTIFICADOR);
      identificadores.add(token.image);
      }
      {if (true) return identificadores;}
    } catch (ParseException e) {
    error_sintactico(e);
    {if (true) return identificadores;}
    }
    throw new Error("Missing return statement in function");
  }

// (declaracion_accion())*
  static final public void declaracion_acciones() throws ParseException {
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tACCION:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        declaracion_accion();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// cabecera_accion() <tFIN_SENTENCIA> declaracion_variables() declaracion_acciones() bloque_sentencias()
  static final public void declaracion_accion() throws ParseException {
    try {
      cabecera_accion();
      jj_consume_token(tFIN_SENTENCIA);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tACCION> <tIDENTIFICADOR> parametros_formales()
  static final public void cabecera_accion() throws ParseException {
  ArrayList < Simbolo > parametros;
  Simbolo accion;
    try {
      jj_consume_token(tACCION);
      jj_consume_token(tIDENTIFICADOR);
      accion = tabla_simbolos.introducir_accion(token.image, nivel, TBD);
      if (accion == null)
      {
        {if (true) throw new ExcepcionTablaSimbolos(token, tabla_simbolos.buscar_simbolo(token.image));}
      }
      nivel++;
      parametros = parametros_formales();
      for (Simbolo parametro : parametros)
      {
        accion.introducir_parametro(parametro);
      }
    } catch (ParseException e) {
    error_sintactico(e);
    } catch (ExcepcionTablaSimbolos e) {
    error_semantico(e);
    }
  }

// ((<tPARENTESIS_IZQ> parametros()) (<tFIN_SENTENCIA> parametros())* <tPARENTESIS_DCHA>)? 
  static final public ArrayList < Simbolo > parametros_formales() throws ParseException {
  if (MiniLenguaje.verbose) System.out.println("Parametros formales \u005cn");
  ArrayList < Simbolo > parametros = new ArrayList < Simbolo > ();
  ArrayList < Simbolo > masParametros;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZQ:
        jj_consume_token(tPARENTESIS_IZQ);
        parametros = parametros();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case tFIN_SENTENCIA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(tFIN_SENTENCIA);
          masParametros = parametros();
      parametros.addAll(masParametros);
        }
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      {if (true) return parametros;}
    } catch (ParseException e) {
    error_sintactico(e);
    {if (true) return parametros;}
    }
    throw new Error("Missing return statement in function");
  }

// expresion() (<tCOMA> expresion())*
  static final public ArrayList < Simbolo > lista_parametros(Clase_parametro clase, Tipo_variable tipo) throws ParseException {
  ArrayList < String > identificadores;
  ArrayList < Simbolo > parametros = new ArrayList();
  Simbolo parametro;
    try {
      identificadores = identificadores();
      for (String identificador : identificadores)
      {
        parametro = tabla_simbolos.introducir_parametro(identificador, tipo, clase, nivel, TBD);
        if (parametro == null)
        {
          {if (true) throw new ExcepcionTablaSimbolos(token, tabla_simbolos.buscar_simbolo(identificador));}
        }
        else
        {
          parametros.add(parametro);
        }
      }
      {if (true) return parametros;}
    } catch (ParseException e) {
    error_sintactico(e);
    {if (true) return parametros;}
    } catch (ExcepcionTablaSimbolos e) {
    error_semantico(e);
    }
    throw new Error("Missing return statement in function");
  }

// clase_parametros() tipo_variables() lista_parametros()
  static final public ArrayList < Simbolo > parametros() throws ParseException {
  Clase_parametro clase;
  Tipo_variable tipo;
  ArrayList < Simbolo > parametros = new ArrayList();
    try {
      clase = clase_parametros();
      tipo = tipo_variables();
      parametros = lista_parametros(clase, tipo);
      {if (true) return parametros;}
    } catch (ParseException e) {
    error_sintactico(e);
    {if (true) return parametros;}
    }
    throw new Error("Missing return statement in function");
  }

// <tVAL> | <tREF>
  static final public Clase_parametro clase_parametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tVAL:
      jj_consume_token(tVAL);
    {if (true) return Clase_parametro.VAL;}
      break;
    case tREF:
      jj_consume_token(tREF);
    {if (true) return Clase_parametro.REF;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// <tPRINCIPIO> lista_sentencias() <tFIN>
  static final public void bloque_sentencias() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
      lista_sentencias();
      jj_consume_token(tFIN);
      //System.out.println("######################################################################################");    
      //System.out.println("Tabla antes de borrar nivel " + nivel);
      //System.out.println(tabla_simbolos);
      tabla_simbolos.ocultar_parametros(nivel);
      tabla_simbolos.eliminar_variables(nivel);
      // Elimino los parámetros ocultos al eliminar las acciones
      tabla_simbolos.eliminar_acciones(nivel);
      nivel--;
      //System.out.println("\nTabla despues de borrar nivel " + (nivel + 1));
      //System.out.println(tabla_simbolos);
      //System.out.println("######################################################################################");

    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// (sentencia())* 
  static final public void lista_sentencias() throws ParseException {
    try {
      label_5:
      while (true) {
        sentencia();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSI:
        case tMQ:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

/*
leer()  < tFIN_SENTENCIA >|
  escribir() < tFIN_SENTENCIA >|
  < tIDENTIFICADOR > [asignacion() |  invocacion_accion() ] < tFIN_SENTENCIA > |
  seleccion()  |
  mientras_que()
  */
  static final public void sentencia() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        leer();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tESCRIBIR:
        escribir();
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPARENTESIS_IZQ:
        case tOPAS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case tOPAS:
            asignacion();
            break;
          case tPARENTESIS_IZQ:
            invocacion_accion();
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(tFIN_SENTENCIA);
        break;
      case tSI:
        seleccion();
        break;
      case tMQ:
        mientras_que();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tLEER> <tPARENTESIS_IZQ> lista_asignables() <tPARENTESIS_DCHA>
  static final public void leer() throws ParseException {
    try {
      jj_consume_token(tLEER);
      jj_consume_token(tPARENTESIS_IZQ);
      lista_asignables();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tIDENTIFICADOR> (<tCOMA> <tIDENTIFICADOR>)*
  static final public void lista_asignables() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(tCOMA);
        jj_consume_token(tIDENTIFICADOR);
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tESCRIBIR> <tPARENTESIS_IZQ> lista_escribibles() <tPARENTESIS_DCHA>
  static final public void escribir() throws ParseException {
    try {
      jj_consume_token(tESCRIBIR);
      jj_consume_token(tPARENTESIS_IZQ);
      lista_escribibles();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// expresion() (<tCOMA> expresion())*
  static final public void lista_escribibles() throws ParseException {
    try {
      expresion();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(tCOMA);
        expresion();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tOPAS> expresion() 
  static final public void asignacion() throws ParseException {
    try {
      jj_consume_token(tOPAS);
      expresion();
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// argumentos() 
  static final public void invocacion_accion() throws ParseException {
    try {
      argumentos();
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tMQ> expresion() lista_sentencias() <tFMQ>
  static final public void mientras_que() throws ParseException {
    try {
      jj_consume_token(tMQ);
      expresion();
      lista_sentencias();
      jj_consume_token(tFMQ);
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tSI> expresion() <tENT> lista_sentencias() (<tSI_NO> lista_sentencias())?  <tFSI>
  static final public void seleccion() throws ParseException {
    try {
      jj_consume_token(tSI);
      expresion();
      jj_consume_token(tENT);
      lista_sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSI_NO:
        jj_consume_token(tSI_NO);
        lista_sentencias();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(tFSI);
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tPARENTESIS_IZQ> (lista_expresiones())? <tPARENTESIS_DCHA>
  static final public void argumentos() throws ParseException {
    try {
      jj_consume_token(tPARENTESIS_IZQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tENTACAR:
      case tCARAENT:
      case tPARENTESIS_IZQ:
      case tMENOS:
      case tSTRING:
      case tIDENTIFICADOR:
      case tVALOR_ENTERO:
      case tVALOR_DECIMAL:
        lista_expresiones();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// expresion() (<tCOMA> expresion())*
  static final public void lista_expresiones() throws ParseException {
    try {
      expresion();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(tCOMA);
        expresion();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// expresion_simple() (operador_relacional() expresion_simple())*
  static final public void expresion() throws ParseException {
    try {
      expresion_simple();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tIGUAL:
        case tMAI:
        case tMEI:
        case tNI:
        case tMAYOR:
        case tMENOR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        operador_relacional();
        expresion_simple();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tMAYOR> | <tMENOR> | <tMAI> | <tMEI> | <tNI> | <tIGUAL>
  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMAYOR:
      jj_consume_token(tMAYOR);
      break;
    case tMENOR:
      jj_consume_token(tMENOR);
      break;
    case tMAI:
      jj_consume_token(tMAI);
      break;
    case tMEI:
      jj_consume_token(tMEI);
      break;
    case tNI:
      jj_consume_token(tNI);
      break;
    case tIGUAL:
      jj_consume_token(tIGUAL);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// termino() (operador_aditivo() termino())*
  static final public void expresion_simple() throws ParseException {
    try {
      termino();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tOR:
        case tMAS:
        case tMENOS:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        operador_aditivo();
        termino();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tMAS> | <tMENOS> | <tOR>
  static final public void operador_aditivo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMAS:
      jj_consume_token(tMAS);
      break;
    case tMENOS:
      jj_consume_token(tMENOS);
      break;
    case tOR:
      jj_consume_token(tOR);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// factor() (operador_multiplicativo() factor())* 
  static final public void termino() throws ParseException {
    try {
      factor();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tAND:
        case tMOD:
        case tPOR:
        case tDIV:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        operador_multiplicativo();
        factor();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

// <tPOR> | <tDIV> | <tMOD> | <tAND>
  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPOR:
      jj_consume_token(tPOR);
      break;
    case tDIV:
      jj_consume_token(tDIV);
      break;
    case tMOD:
      jj_consume_token(tMOD);
      break;
    case tAND:
      jj_consume_token(tAND);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
	< tMENOS > factor()
| < tNOT > factor()
| < tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCHA >
| < tENTACAR > <tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCHA >
| < tCARAENT > <tPARENTESIS_IZQ > expresion() < tPARENTESIS_DCHA >
| < tIDENTIFICADOR >
| < tVALOR_ENTERO >
| < tVALOR_DECIMAL >
| < tSTRING >
| < tTRUE >
| < tFALSE >
*/
  static final public void factor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMENOS:
        jj_consume_token(tMENOS);
        factor();
        break;
      case tNOT:
        jj_consume_token(tNOT);
        factor();
        break;
      case tPARENTESIS_IZQ:
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      case tENTACAR:
        jj_consume_token(tENTACAR);
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      case tCARAENT:
        jj_consume_token(tCARAENT);
        jj_consume_token(tPARENTESIS_IZQ);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        break;
      case tVALOR_ENTERO:
        jj_consume_token(tVALOR_ENTERO);
        break;
      case tVALOR_DECIMAL:
        jj_consume_token(tVALOR_DECIMAL);
        break;
      case tSTRING:
        jj_consume_token(tSTRING);
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    error_sintactico(e);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniLenguajeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x0,0x10000000,0x0,0x0,0x60000000,0x688000,0x0,0x0,0x688000,0x0,0x0,0x20000,0xf001000,0x0,0x0,0x0,0x800,0x800,0x800400,0x800400,0xf001000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7,0x7,0x1000,0x0,0x800,0x20,0x0,0x2000000,0x220,0x220,0x2000000,0x1000,0x1000,0x0,0xf004020,0x1000,0x3e0400,0x3e0400,0x6000,0x6000,0x18000,0x18000,0xf004020,};
   }

  /** Constructor with InputStream. */
  public MiniLenguaje(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniLenguaje(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniLenguajeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniLenguaje(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniLenguajeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniLenguaje(MiniLenguajeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniLenguajeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
